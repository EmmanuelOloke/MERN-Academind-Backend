{"version":3,"sources":["shared/context/auth-context.js","shared/components/UIElements/LoadingSpinner.js","shared/components/UIElements/BackDrop.js","shared/hooks/auth-hook.js","shared/components/Navigation/MainHeader.js","shared/components/Navigation/NavLinks.js","shared/components/Navigation/SideDrawer.js","shared/components/Navigation/MainNavigation.js","App.js","index.js"],"names":["AuthContext","createContext","isLoggedIn","userId","token","login","logout","LoadingSpinner","props","className","asOverlay","BackDrop","content","onClick","ReactDOM","createPortal","document","getElementById","logoutTimer","MainHeader","children","NavLinks","auth","useContext","to","exact","SideDrawer","CSSTransition","in","show","timeout","classNames","mountOnEnter","unmountOnExit","MainNavigation","useState","drawerIsOpen","setDrawerIsOpen","closeDrawerHandler","Fragment","Users","React","lazy","NewPlace","UserPlaces","UpdatePlace","Auth","App","routes","setToken","tokenExpirationDate","setTokenExpirationDate","setUserId","useCallback","uid","expirationDate","Date","getTime","localStorage","setItem","JSON","stringify","expiration","toISOString","removeItem","useEffect","remainingTime","setTimeout","clearTimeout","storedData","parse","getItem","useAuth","path","Provider","value","fallback","render"],"mappings":"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","file":"static/js/main.725ac0da.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nexport const AuthContext = createContext({\n    isLoggedIn: false,\n    userId: null,\n    token: null,\n    login: () => {},\n    logout: () => {},\n});","import React from 'react';\n\nimport './LoadingSpinner.css';\n\nconst LoadingSpinner = (props) => {\n  return (\n    <div className={`${props.asOverlay && 'loading-spinner__overlay'}`}>\n      <div className=\"lds-dual-ring\"></div>\n    </div>\n  );\n};\n\nexport default LoadingSpinner;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './BackDrop.css';\n\nconst BackDrop = (props) => {\n  const content = <div className=\"backdrop\" onClick={props.onClick}></div>;\n  return ReactDOM.createPortal(\n    content,\n    document.getElementById('backdrop-hook')\n  );\n};\n\nexport default BackDrop;\n","import { useState, useEffect, useCallback } from 'react';\n\nlet logoutTimer; // We declare it outside of the app because it's just some behind the scene variable that we need to manage and not something that will rerender the component or anything\n\nexport const useAuth = () => {\n\n    const [token, setToken] = useState(false);\n    const [tokenExpirationDate, setTokenExpirationDate] = useState();\n    const [userId, setUserId] = useState(false);\n\n    const login = useCallback((uid, token, expirationDate) => {\n        setToken(token);\n        setUserId(uid);\n        const tokenExpirationDate =\n            expirationDate || new Date(new Date().getTime() + 1000 * 60 * 60); // This gives us a new date which is current date/time at login time plus 1 hour, since the expiration time we set on the backend is 1 hour\n        setTokenExpirationDate(tokenExpirationDate);\n        localStorage.setItem(\n            'userData',\n            JSON.stringify({\n                userId: uid,\n                token: token,\n                expiration: tokenExpirationDate.toISOString(),\n            })\n        ); // Using localStorage which is a browser functionality to store our token, so we don't get logged on every refresh. You can only write text or data that can be converted into text to the localStorage object, that's why we had to use JSON.stringify(). We also add the expiration key to store the expiration date which is one hour from login time, and used the .toISOString method to make sure no data gets lost when it's being stringified\n    }, []);\n\n    const logout = useCallback(() => {\n        setToken(null);\n        setTokenExpirationDate(null);\n        setUserId(null);\n        localStorage.removeItem('userData');\n    }, []);\n\n    useEffect(() => {\n        // We set the timer here whenever the token changes, so the dependencies here are the token and the logout function, and the tokenExpirationDate. The token changes when we login or logout\n        if (token && tokenExpirationDate) {\n            const remainingTime =\n                tokenExpirationDate.getTime() - new Date().getTime();\n            logoutTimer = setTimeout(logout, remainingTime);\n        } else {\n            clearTimeout(logoutTimer);\n        }\n    }, [token, logout, tokenExpirationDate]);\n\n    useEffect(() => {\n        // Adding a function to check the browser localStorage for a token once the app starts. The dependencies of the function is an empty array which means the function will only run once\n        const storedData = JSON.parse(localStorage.getItem('userData')); // We use the getItem method on localStorageand pass in the key which we used to store the token, which in this case is userData. We use the JSON.parse method so we can convert JSON strings to regular JS DS like Object\n        if (\n            storedData &&\n            storedData.token &&\n            new Date(storedData.expiration) > new Date()\n        ) {\n            login(\n                storedData.userId,\n                storedData.token,\n                new Date(storedData.expiration)\n            );\n        }\n    }, [login]);\n\n    return { token, login, logout, userId };\n}","import React from 'react';\n\nimport './MainHeader.css';\n\nconst MainHeader = (props) => {\n  return <header className=\"main-header\">{props.children}</header>;\n};\n\nexport default MainHeader;\n","import React, { useContext } from 'react';\nimport { NavLink } from 'react-router-dom'; // Special linking component that can analize URL and color current page link differently\n\nimport { AuthContext } from '../../context/auth-context';\nimport './NavLinks.css';\n\nconst NavLinks = (props) => {\n  const auth = useContext(AuthContext);\n  return (\n    <ul className=\"nav-links\">\n      <li>\n        <NavLink to=\"/\" exact>\n          ALL USERS\n        </NavLink>\n      </li>\n      {auth.isLoggedIn && (\n        <li>\n          <NavLink to={`/${auth.userId}/places`}> MY PLACES </NavLink>\n        </li>\n      )}\n      {auth.isLoggedIn && (\n        <li>\n          <NavLink to=\"/places/new\"> ADD PLACE </NavLink>\n        </li>\n      )}\n      {!auth.isLoggedIn && (\n        <li>\n          <NavLink to=\"/auth\"> AUTHENTICATE </NavLink>\n        </li>\n      )}\n      {auth.isLoggedIn && (\n        <li>\n          <button onClick={auth.logout}>LOGOUT</button>\n        </li>\n      )}\n    </ul>\n  );\n};\n\nexport default NavLinks;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CSSTransition } from 'react-transition-group';\n\nimport './SideDrawer.css';\n\nconst SideDrawer = (props) => {\n  const content = (\n    <CSSTransition\n      in={props.show}\n      timeout={200}\n      classNames=\"slide-in-left\"\n      mountOnEnter\n      unmountOnExit\n    >\n      <aside className=\"side-drawer\" onClick={props.onClick}>\n        {props.children}\n      </aside>\n    </CSSTransition>\n  );\n\n  return ReactDOM.createPortal(content, document.getElementById('drawer-hook')); // Using ReactDOM to create a React Portal\n};\n\nexport default SideDrawer;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport MainHeader from './MainHeader';\nimport NavLinks from './NavLinks';\nimport SideDrawer from './SideDrawer';\nimport BackDrop from '../UIElements/BackDrop';\nimport './MainNavigation.css';\n\nconst MainNavigation = (props) => {\n  const [drawerIsOpen, setDrawerIsOpen] = useState(false);\n\n  const openDrawerHandler = () => {\n    setDrawerIsOpen(true);\n  };\n\n  const closeDrawerHandler = () => {\n    setDrawerIsOpen(false);\n  };\n  return (\n    <React.Fragment>\n      {drawerIsOpen && <BackDrop onClick={closeDrawerHandler} />}\n      <SideDrawer show={drawerIsOpen} onClick={closeDrawerHandler}>\n        <nav className=\"main-navigation__drawer-nav\">\n          <NavLinks />\n        </nav>\n      </SideDrawer>\n      <MainHeader>\n        <button\n          className=\"main-navigation__menu-btn\"\n          onClick={openDrawerHandler}\n        >\n          <span />\n          <span />\n          <span />\n        </button>\n        <h1 className=\"main-navigation__title\">\n          <Link to=\"/\">Your Places</Link>\n        </h1>\n        <nav className=\"main-navigation__header-nav\">\n          <NavLinks />\n        </nav>\n      </MainHeader>\n    </React.Fragment>\n  );\n};\n\nexport default MainNavigation;\n","import React, { Suspense } from 'react'; // Suspense is required to make React.lazy work\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from 'react-router-dom';\n// import Users from './user/pages/Users';\n// import NewPlace from './places/pages/NewPlace';\n// import UserPlaces from './places/pages/UserPlaces';\n// import UpdatePlace from './places/pages/UpdatePlace';\n// import Auth from './user/pages/Auth';\nimport MainNavigation from './shared/components/Navigation/MainNavigation';\nimport { AuthContext } from './shared/context/auth-context';\nimport { useAuth } from './shared/hooks/auth-hook';\nimport LoadingSpinner from './shared/components/UIElements/LoadingSpinner';\n\nconst Users = React.lazy(() => import('./user/pages/Users')); // Here we're implementing lazy-loading\nconst NewPlace = React.lazy(() => import('./places/pages/NewPlace'));\nconst UserPlaces = React.lazy(() => import('./places/pages/UserPlaces'));\nconst UpdatePlace = React.lazy(() => import('./places/pages/UpdatePlace'));\nconst Auth = React.lazy(() => import('./user/pages/Auth'));\n\nconst App = () => {\n  const { token, login, logout, userId } = useAuth();\n  let routes;\n\n  if (token) {\n    routes = (\n      <Switch>\n        <Route path=\"/\" exact>\n          <Users />\n        </Route>\n        <Route path=\"/:userId/places\" exact>\n          <UserPlaces />\n        </Route>\n        <Route path=\"/places/new\" exact>\n          <NewPlace />\n        </Route>\n        <Route path=\"/places/:placeId\" exact>\n          <UpdatePlace />\n        </Route>\n        <Redirect to=\"/\" />\n      </Switch>\n    );\n  } else {\n    routes = (\n      <Switch>\n        <Route path=\"/\" exact>\n          <Users />\n        </Route>\n        <Route path=\"/:userId/places\" exact>\n          <UserPlaces />\n        </Route>\n        <Route path=\"/auth\" exact>\n          <Auth />\n        </Route>\n        <Redirect to=\"/auth\" />\n      </Switch>\n    );\n  }\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isLoggedIn: !!token,\n        token: token,\n        userId: userId,\n        login: login,\n        logout: logout,\n      }}\n    >\n      <Router>\n        <MainNavigation />\n        <main>\n          <Suspense\n            fallback={\n              <div className=\"center\">\n                <LoadingSpinner />\n              </div>\n            }\n          >\n            {routes}\n          </Suspense>\n        </main>\n      </Router>\n    </AuthContext.Provider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}